import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import * as React from "react";
import { useCallback } from "react";
import * as RF from "reactflow";
import { NODE_TYPES } from "./BpmnDiagramDomain";
import { CallActivityIcon, DataObjectIcon, EndEventIcon, GatewayIcon, GroupIcon, IntermediateCatchEventIcon, LaneIcon, StartEventIcon, SubProcessIcon, TaskIcon, TextAnnotationIcon, } from "./nodes/NodeIcons";
export const MIME_TYPE_FOR_BPMN_EDITOR_NEW_NODE_FROM_PALETTE = "application/kie-bpmn-editor--new-node-from-palette";
export function BpmnPalette({ pulse }) {
    const onDragStart = useCallback((event, nodeType, element) => {
        event.dataTransfer.setData(MIME_TYPE_FOR_BPMN_EDITOR_NEW_NODE_FROM_PALETTE, JSON.stringify({ nodeType, element }));
        event.dataTransfer.effectAllowed = "move";
    }, []);
    const nodesPalletePopoverRef = React.useRef(null);
    return (_jsx(_Fragment, { children: _jsxs(RF.Panel, { position: "top-left", style: { marginTop: "78px" }, children: [_jsx("div", { ref: nodesPalletePopoverRef, style: { position: "absolute", left: 0, height: 0, zIndex: -1 } }), _jsxs("aside", { className: `kie-bpmn-editor--palette ${pulse ? "pulse" : ""}`, children: [_jsx("div", { title: "Start Events", className: "kie-bpmn-editor--palette-button dndnode start-event", onDragStart: (event) => onDragStart(event, NODE_TYPES.startEvent, "startEvent"), draggable: true, children: _jsx(StartEventIcon, {}) }), _jsx("div", { title: "Intermediate Events", className: "kie-bpmn-editor--palette-button dndnode intermediate-catch-event", onDragStart: (event) => onDragStart(event, NODE_TYPES.intermediateCatchEvent, "intermediateCatchEvent"), draggable: true, children: _jsx(IntermediateCatchEventIcon, {}) }), _jsx("div", { title: "End Events", className: "kie-bpmn-editor--palette-button dndnode end-event", onDragStart: (event) => onDragStart(event, NODE_TYPES.endEvent, "endEvent"), draggable: true, children: _jsx(EndEventIcon, {}) }), _jsx("div", { title: "Tasks", className: "kie-bpmn-editor--palette-button dndnode task", onDragStart: (event) => onDragStart(event, NODE_TYPES.task, "task"), draggable: true, children: _jsx(TaskIcon, {}) }), _jsx("div", { title: "Call Activities", className: "kie-bpmn-editor--palette-button dndnode callActivity", onDragStart: (event) => onDragStart(event, NODE_TYPES.task, "callActivity"), draggable: true, children: _jsx(CallActivityIcon, {}) }), _jsx("div", { title: "Sub-processes", className: "kie-bpmn-editor--palette-button dndnode subProcess", onDragStart: (event) => onDragStart(event, NODE_TYPES.subProcess, "subProcess"), draggable: true, children: _jsx(SubProcessIcon, {}) }), _jsx("div", { title: "Gateways", className: "kie-bpmn-editor--palette-button dndnode gateway", onDragStart: (event) => onDragStart(event, NODE_TYPES.gateway, "parallelGateway"), draggable: true, children: _jsx(GatewayIcon, {}) }), _jsx("div", { title: "Lanes", className: "kie-bpmn-editor--palette-button dndnode lane", onDragStart: (event) => onDragStart(event, NODE_TYPES.lane, "lane"), draggable: true, children: _jsx(LaneIcon, {}) })] }), _jsx("br", {}), _jsx("aside", { className: `kie-bpmn-editor--palette ${pulse ? "pulse" : ""}`, children: _jsx("div", { title: "Data Object", className: "kie-bpmn-editor--palette-button dndnode data-object", onDragStart: (event) => onDragStart(event, NODE_TYPES.dataObject, "dataObject"), draggable: true, children: _jsx(DataObjectIcon, {}) }) }), _jsx("br", {}), _jsxs("aside", { className: `kie-bpmn-editor--palette ${pulse ? "pulse" : ""}`, children: [_jsx("div", { title: "Group", className: "kie-bpmn-editor--palette-button dndnode group", onDragStart: (event) => onDragStart(event, NODE_TYPES.group, "group"), draggable: true, children: _jsx(GroupIcon, {}) }), _jsx("div", { title: "Text Annotation", className: "kie-bpmn-editor--palette-button dndnode text-annotation", onDragStart: (event) => onDragStart(event, NODE_TYPES.textAnnotation, "textAnnotation"), draggable: true, children: _jsx(TextAnnotationIcon, {}) })] })] }) }));
}
//# sourceMappingURL=BpmnPalette.js.map