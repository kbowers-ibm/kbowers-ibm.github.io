"use strict";
self["webpackHotUpdate_kie_tools_bpmn_editor"]("misc-empty-Empty-stories",{

/***/ "./src/BpmnEditor.tsx":
/*!****************************!*\
  !*** ./src/BpmnEditor.tsx ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BpmnEditor: () => (/* binding */ BpmnEditor),
/* harmony export */   BpmnEditorInternal: () => (/* binding */ BpmnEditorInternal)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ "../../node_modules/.pnpm/react@17.0.2/node_modules/react/jsx-runtime.js");
/* harmony import */ var _patternfly_react_core_dist_styles_base_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @patternfly/react-core/dist/styles/base.css */ "../../node_modules/.pnpm/@patternfly+react-core@4.276.6_react-dom@17.0.2_react@17.0.2__react@17.0.2/node_modules/@patternfly/react-core/dist/styles/base.css");
/* harmony import */ var reactflow_dist_style_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! reactflow/dist/style.css */ "../../node_modules/.pnpm/reactflow@11.10.1_@types+react@17.0.21_immer@10.0.3_patch_hash=utu5oov26wz5mjuays57tp3ybu__re_jarraoawze25g6tc5b4lcviyam/node_modules/reactflow/dist/style.css");
/* harmony import */ var _patternfly_react_core_dist_js_components_Drawer__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @patternfly/react-core/dist/js/components/Drawer */ "../../node_modules/.pnpm/@patternfly+react-core@4.276.6_react-dom@17.0.2_react@17.0.2__react@17.0.2/node_modules/@patternfly/react-core/dist/js/components/Drawer/index.js");
/* harmony import */ var _patternfly_react_core_dist_js_components_Drawer__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(_patternfly_react_core_dist_js_components_Drawer__WEBPACK_IMPORTED_MODULE_25__);
/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! immer */ "../../node_modules/.pnpm/immer@10.0.3_patch_hash=utu5oov26wz5mjuays57tp3ybu/node_modules/immer/dist/immer.mjs");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ "../../node_modules/.pnpm/react@17.0.2/node_modules/react/index.js");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-dom */ "../../node_modules/.pnpm/react-dom@17.0.2_react@17.0.2/node_modules/react-dom/index.js");
/* harmony import */ var react_error_boundary__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! react-error-boundary */ "../../node_modules/.pnpm/react-error-boundary@4.0.12_react@17.0.2/node_modules/react-error-boundary/dist/react-error-boundary.development.esm.js");
/* harmony import */ var reactflow__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! reactflow */ "../../node_modules/.pnpm/@reactflow+core@11.10.1_@types+react@17.0.21_immer@10.0.3_patch_hash=utu5oov26wz5mjuays57tp3y_kvkkldyzgoymrhkgoz2ul5eloq/node_modules/@reactflow/core/dist/esm/index.mjs");
/* harmony import */ var _BpmnEditorContext__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./BpmnEditorContext */ "./src/BpmnEditorContext.tsx");
/* harmony import */ var _BpmnEditorErrorFallback__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./BpmnEditorErrorFallback */ "./src/BpmnEditorErrorFallback.tsx");
/* harmony import */ var _diagram_BpmnDiagram__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./diagram/BpmnDiagram */ "./src/diagram/BpmnDiagram.tsx");
/* harmony import */ var _diagram_BpmnVersionLabel__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./diagram/BpmnVersionLabel */ "./src/diagram/BpmnVersionLabel.tsx");
/* harmony import */ var _externalModels_BpmnEditorExternalModelsContext__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./externalModels/BpmnEditorExternalModelsContext */ "./src/externalModels/BpmnEditorExternalModelsContext.tsx");
/* harmony import */ var _normalization_normalize__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./normalization/normalize */ "./src/normalization/normalize.ts");
/* harmony import */ var _store_initialComputedCache__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./store/initialComputedCache */ "./src/store/initialComputedCache.ts");
/* harmony import */ var _kie_tools_xyflow_react_kie_diagram_dist_store_ComputedStateCache__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @kie-tools/xyflow-react-kie-diagram/dist/store/ComputedStateCache */ "../xyflow-react-kie-diagram/dist/store/ComputedStateCache.js");
/* harmony import */ var _kie_tools_xyflow_react_kie_diagram_dist_store_Store__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @kie-tools/xyflow-react-kie-diagram/dist/store/Store */ "../xyflow-react-kie-diagram/dist/store/Store.js");
/* harmony import */ var _store_Store__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./store/Store */ "./src/store/Store.ts");
/* harmony import */ var _store_StoreContext__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./store/StoreContext */ "./src/store/StoreContext.ts");
/* harmony import */ var _svg_BpmnDiagramSvg__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./svg/BpmnDiagramSvg */ "./src/svg/BpmnDiagramSvg.tsx");
/* harmony import */ var _kie_tools_xyflow_react_kie_diagram_dist_reactExt_useStateAsItWasBeforeConditionBecameTrue__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @kie-tools/xyflow-react-kie-diagram/dist/reactExt/useStateAsItWasBeforeConditionBecameTrue */ "../xyflow-react-kie-diagram/dist/reactExt/useStateAsItWasBeforeConditionBecameTrue.js");
/* harmony import */ var _kie_tools_xyflow_react_kie_diagram_dist_reactExt_useEffectAfterFirstRender__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @kie-tools/xyflow-react-kie-diagram/dist/reactExt/useEffectAfterFirstRender */ "../xyflow-react-kie-diagram/dist/reactExt/useEffectAfterFirstRender.js");
/* harmony import */ var _commands_CommandsContextProvider__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./commands/CommandsContextProvider */ "./src/commands/CommandsContextProvider.tsx");
/* harmony import */ var _propertiesPanel_PropertiesPanel__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./propertiesPanel/PropertiesPanel */ "./src/propertiesPanel/PropertiesPanel.tsx");
/* harmony import */ var _kie_tools_xyflow_react_kie_diagram_dist_patternfly_customizations_css__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @kie-tools/xyflow-react-kie-diagram/dist/patternfly-customizations.css */ "../xyflow-react-kie-diagram/dist/patternfly-customizations.css");
/* harmony import */ var _kie_tools_xyflow_react_kie_diagram_dist_xyflow_customizations_css__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @kie-tools/xyflow-react-kie-diagram/dist/xyflow-customizations.css */ "../xyflow-react-kie-diagram/dist/xyflow-customizations.css");
/* harmony import */ var _BpmnEditor_css__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./BpmnEditor.css */ "./src/BpmnEditor.css");





























const ON_MODEL_CHANGE_DEBOUNCE_TIME_IN_MS = 500;
const SVG_PADDING = 20;
const BpmnEditorInternal = _ref => {
  let {
    model,
    originalVersion,
    onModelChange,
    onModelDebounceStateChanged,
    forwardRef
  } = _ref;
  const isPropertiesPanelOpen = (0,_store_StoreContext__WEBPACK_IMPORTED_MODULE_14__.useBpmnEditorStore)(s => s.propertiesPanel.isOpen);
  const bpmn = (0,_store_StoreContext__WEBPACK_IMPORTED_MODULE_14__.useBpmnEditorStore)(s => s.bpmn);
  const isDiagramEditingInProgress = (0,_store_StoreContext__WEBPACK_IMPORTED_MODULE_14__.useBpmnEditorStore)(s => s.computed(s).isDiagramEditingInProgress());
  const bpmnEditorStoreApi = (0,_store_StoreContext__WEBPACK_IMPORTED_MODULE_14__.useBpmnEditorStoreApi)();
  const {
    commandsRef
  } = (0,_commands_CommandsContextProvider__WEBPACK_IMPORTED_MODULE_18__.useCommands)();
  const {
    bpmnModelBeforeEditingRef,
    bpmnEditorRootElementRef
  } = (0,_BpmnEditorContext__WEBPACK_IMPORTED_MODULE_5__.useBpmnEditor)();
  const diagramRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);
  const diagramContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);
  (0,react__WEBPACK_IMPORTED_MODULE_3__.useImperativeHandle)(forwardRef, () => ({
    reset: model => {
      const state = bpmnEditorStoreApi.getState();
      return state.dispatch(state).reset((0,_normalization_normalize__WEBPACK_IMPORTED_MODULE_10__.normalize)(model));
    },
    getDiagramSvg: async () => {
      var _a, _b, _c, _d;
      const nodes = (_b = (_a = diagramRef.current) === null || _a === void 0 ? void 0 : _a.getReactFlowInstance()) === null || _b === void 0 ? void 0 : _b.getNodes();
      const edges = (_d = (_c = diagramRef.current) === null || _c === void 0 ? void 0 : _c.getReactFlowInstance()) === null || _d === void 0 ? void 0 : _d.getEdges();
      if (!nodes || !edges) {
        return undefined;
      }
      const bounds = reactflow__WEBPACK_IMPORTED_MODULE_23__.getNodesBounds(nodes);
      const state = bpmnEditorStoreApi.getState();
      const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
      svg.setAttribute("width", bounds.width + SVG_PADDING * 2 + "");
      svg.setAttribute("height", bounds.height + SVG_PADDING * 5 + "");
      react_dom__WEBPACK_IMPORTED_MODULE_4__.render((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("g", {
        transform: `translate(${-bounds.x + SVG_PADDING} ${-bounds.y + SVG_PADDING})`,
        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_svg_BpmnDiagramSvg__WEBPACK_IMPORTED_MODULE_15__.BpmnDiagramSvg, {
          nodes: nodes,
          edges: edges,
          snapGrid: state.xyFlowReactKieDiagram.snapGrid
        })
      }), svg);
      return new XMLSerializer().serializeToString(svg);
    },
    getCommands: () => commandsRef.current
  }), [bpmnEditorStoreApi, commandsRef]);
  (0,_kie_tools_xyflow_react_kie_diagram_dist_reactExt_useEffectAfterFirstRender__WEBPACK_IMPORTED_MODULE_17__.useEffectAfterFirstRender)(() => {
    bpmnEditorStoreApi.setState(state => {
      if (model === (0,immer__WEBPACK_IMPORTED_MODULE_24__.original)(state.bpmn.model)) {
        return;
      }
      state.bpmn.model = (0,_normalization_normalize__WEBPACK_IMPORTED_MODULE_10__.normalize)(model);
      bpmnModelBeforeEditingRef.current = state.bpmn.model;
    });
  }, [bpmnEditorStoreApi, model]);
  (0,_kie_tools_xyflow_react_kie_diagram_dist_reactExt_useStateAsItWasBeforeConditionBecameTrue__WEBPACK_IMPORTED_MODULE_16__.useStateAsItWasBeforeConditionBecameTrue)(bpmn.model, isDiagramEditingInProgress, (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(prev => bpmnModelBeforeEditingRef.current = prev, [bpmnModelBeforeEditingRef]));
  (0,_kie_tools_xyflow_react_kie_diagram_dist_reactExt_useEffectAfterFirstRender__WEBPACK_IMPORTED_MODULE_17__.useEffectAfterFirstRender)(() => {
    if (isDiagramEditingInProgress) {
      return;
    }
    onModelDebounceStateChanged === null || onModelDebounceStateChanged === void 0 ? void 0 : onModelDebounceStateChanged(false);
    const timeout = setTimeout(() => {
      if (model === bpmn.model) {
        return;
      }
      onModelDebounceStateChanged === null || onModelDebounceStateChanged === void 0 ? void 0 : onModelDebounceStateChanged(true);
      console.debug("BPMN EDITOR: Model changed!");
      onModelChange === null || onModelChange === void 0 ? void 0 : onModelChange(bpmn.model);
    }, ON_MODEL_CHANGE_DEBOUNCE_TIME_IN_MS);
    return () => {
      clearTimeout(timeout);
    };
  }, [isDiagramEditingInProgress, onModelChange, bpmn.model]);
  const propertiesPanel = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_propertiesPanel_PropertiesPanel__WEBPACK_IMPORTED_MODULE_19__.PropertiesPanel, {}), []);
  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div", {
    ref: bpmnEditorRootElementRef,
    className: "kie-bpmn-editor--root",
    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_patternfly_react_core_dist_js_components_Drawer__WEBPACK_IMPORTED_MODULE_25__.Drawer, {
      isExpanded: isPropertiesPanelOpen,
      isInline: true,
      position: "right",
      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_patternfly_react_core_dist_js_components_Drawer__WEBPACK_IMPORTED_MODULE_25__.DrawerContent, {
        panelContent: propertiesPanel,
        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_patternfly_react_core_dist_js_components_Drawer__WEBPACK_IMPORTED_MODULE_25__.DrawerContentBody, {
          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)("div", {
            className: "kie-bpmn-editor--diagram-container",
            ref: diagramContainerRef,
            "data-testid": "kie-bpmn-editor--diagram-container",
            children: [originalVersion && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_diagram_BpmnVersionLabel__WEBPACK_IMPORTED_MODULE_8__.BpmnVersionLabel, {
              version: originalVersion
            }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_diagram_BpmnDiagram__WEBPACK_IMPORTED_MODULE_7__.BpmnDiagram, {
              diagramRef: diagramRef,
              container: diagramContainerRef
            })]
          })
        })
      })
    })
  });
};
const BpmnEditor = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3__.forwardRef((props, ref) => {
  const store = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(() => (0,_store_Store__WEBPACK_IMPORTED_MODULE_13__.createBpmnEditorStore)(props.model, new _kie_tools_xyflow_react_kie_diagram_dist_store_ComputedStateCache__WEBPACK_IMPORTED_MODULE_26__.ComputedStateCache(_store_initialComputedCache__WEBPACK_IMPORTED_MODULE_11__.INITIAL_COMPUTED_CACHE)), []);
  const storeRef = react__WEBPACK_IMPORTED_MODULE_3__.useRef(store);
  const resetState = (0,react__WEBPACK_IMPORTED_MODULE_3__.useCallback)(_ref2 => {
    let {
      args
    } = _ref2;
    var _a;
    (_a = storeRef.current) === null || _a === void 0 ? void 0 : _a.setState(state => {
      state.diagram = (0,_store_Store__WEBPACK_IMPORTED_MODULE_13__.getDefaultStaticState)().diagram;
      state.bpmn.model = args[0];
    });
  }, []);
  return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_BpmnEditorContext__WEBPACK_IMPORTED_MODULE_5__.BpmnEditorContextProvider, {
    ...props,
    children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_error_boundary__WEBPACK_IMPORTED_MODULE_27__.ErrorBoundary, {
      FallbackComponent: _BpmnEditorErrorFallback__WEBPACK_IMPORTED_MODULE_6__.BpmnEditorErrorFallback,
      onReset: resetState,
      children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_externalModels_BpmnEditorExternalModelsContext__WEBPACK_IMPORTED_MODULE_9__.BpmnEditorExternalModelsContextProvider, {
        ...props,
        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_store_StoreContext__WEBPACK_IMPORTED_MODULE_14__.BpmnEditorStoreApiContext.Provider, {
          value: storeRef.current,
          children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_kie_tools_xyflow_react_kie_diagram_dist_store_Store__WEBPACK_IMPORTED_MODULE_12__.XyFlowReactKieDiagramStoreApiContext.Provider, {
            value: storeRef.current,
            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_commands_CommandsContextProvider__WEBPACK_IMPORTED_MODULE_18__.CommandsContextProvider, {
              children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(BpmnEditorInternal, {
                forwardRef: ref,
                ...props
              })
            })
          })
        })
      })
    })
  });
});
try {
    // @ts-ignore
    BpmnEditorInternal.displayName = "BpmnEditorInternal";
    // @ts-ignore
    BpmnEditorInternal.__docgenInfo = { "description": "", "displayName": "BpmnEditorInternal", "props": { "model": { "defaultValue": null, "description": "The BPMN itself.", "name": "model", "required": true, "type": { "name": "BpmnLatestModel" } }, "originalVersion": { "defaultValue": null, "description": "The original version of `model` before upgrading to `latest`.", "name": "originalVersion", "required": false, "type": { "name": "enum", "value": [{ "value": "\"2.0\"" }] } }, "onModelChange": { "defaultValue": null, "description": "Called when a change occurs on `model`, so the controlled flow of the component can be done.", "name": "onModelChange", "required": false, "type": { "name": "OnBpmnModelChange" } }, "externalContextName": { "defaultValue": null, "description": "The name of context in which this instance of BPMN Editor is running. For example, if this BPMN Editor instance\nis displaying a model from a project called \"My project\", you could use `externalContextName={\"My project\"}`", "name": "externalContextName", "required": false, "type": { "name": "string" } }, "externalContextDescription": { "defaultValue": null, "description": "Describe the context in which this instance of BPMN Editor is running. For example, if this BPMN Editor instance\nis displaying a model from a project called \"My project\", you could use\n`externalContextDescription={'All models (DMN, etc) of \"My project\" are available.'}`", "name": "externalContextDescription", "required": false, "type": { "name": "string" } }, "issueTrackerHref": { "defaultValue": null, "description": "A link that will take users to an issue tracker so they can report problems they find on the BPMN Editor.\nThis is shown on the ErrorBoundary fallback component, when an uncaught error happens.", "name": "issueTrackerHref", "required": false, "type": { "name": "string" } }, "onRequestToJumpToPath": { "defaultValue": null, "description": "When users want to jump to another file, this method is called, allowing the controller of this component decide what to do.\nLinks are only rendered if this is provided. Otherwise, paths will be rendered as text.", "name": "onRequestToJumpToPath", "required": false, "type": { "name": "OnRequestToJumpToPath" } }, "onRequestToResolvePath": { "defaultValue": null, "description": "All paths inside the BPMN Editor are relative. To be able to resolve them and display them as absolute paths, this function is called.\nIf undefined, the relative paths will be displayed.", "name": "onRequestToResolvePath", "required": false, "type": { "name": "OnRequestToResolvePath" } }, "onModelDebounceStateChanged": { "defaultValue": null, "description": "Notifies the caller when the BPMN Editor performs a new edit after the debounce time.", "name": "onModelDebounceStateChanged", "required": false, "type": { "name": "((changed: boolean) => void)" } }, "forwardRef": { "defaultValue": null, "description": "", "name": "forwardRef", "required": false, "type": { "name": "Ref<BpmnEditorRef>" } } } };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["src/BpmnEditor.tsx#BpmnEditorInternal"] = { docgenInfo: BpmnEditorInternal.__docgenInfo, name: "BpmnEditorInternal", path: "src/BpmnEditor.tsx#BpmnEditorInternal" };
}
catch (__react_docgen_typescript_loader_error) { }
try {
    // @ts-ignore
    BpmnEditor.displayName = "BpmnEditor";
    // @ts-ignore
    BpmnEditor.__docgenInfo = { "description": "", "displayName": "BpmnEditor", "props": { "model": { "defaultValue": null, "description": "The BPMN itself.", "name": "model", "required": true, "type": { "name": "BpmnLatestModel" } }, "originalVersion": { "defaultValue": null, "description": "The original version of `model` before upgrading to `latest`.", "name": "originalVersion", "required": false, "type": { "name": "enum", "value": [{ "value": "\"2.0\"" }] } }, "onModelChange": { "defaultValue": null, "description": "Called when a change occurs on `model`, so the controlled flow of the component can be done.", "name": "onModelChange", "required": false, "type": { "name": "OnBpmnModelChange" } }, "externalContextName": { "defaultValue": null, "description": "The name of context in which this instance of BPMN Editor is running. For example, if this BPMN Editor instance\nis displaying a model from a project called \"My project\", you could use `externalContextName={\"My project\"}`", "name": "externalContextName", "required": false, "type": { "name": "string" } }, "externalContextDescription": { "defaultValue": null, "description": "Describe the context in which this instance of BPMN Editor is running. For example, if this BPMN Editor instance\nis displaying a model from a project called \"My project\", you could use\n`externalContextDescription={'All models (DMN, etc) of \"My project\" are available.'}`", "name": "externalContextDescription", "required": false, "type": { "name": "string" } }, "issueTrackerHref": { "defaultValue": null, "description": "A link that will take users to an issue tracker so they can report problems they find on the BPMN Editor.\nThis is shown on the ErrorBoundary fallback component, when an uncaught error happens.", "name": "issueTrackerHref", "required": false, "type": { "name": "string" } }, "onRequestToJumpToPath": { "defaultValue": null, "description": "When users want to jump to another file, this method is called, allowing the controller of this component decide what to do.\nLinks are only rendered if this is provided. Otherwise, paths will be rendered as text.", "name": "onRequestToJumpToPath", "required": false, "type": { "name": "OnRequestToJumpToPath" } }, "onRequestToResolvePath": { "defaultValue": null, "description": "All paths inside the BPMN Editor are relative. To be able to resolve them and display them as absolute paths, this function is called.\nIf undefined, the relative paths will be displayed.", "name": "onRequestToResolvePath", "required": false, "type": { "name": "OnRequestToResolvePath" } }, "onModelDebounceStateChanged": { "defaultValue": null, "description": "Notifies the caller when the BPMN Editor performs a new edit after the debounce time.", "name": "onModelDebounceStateChanged", "required": false, "type": { "name": "((changed: boolean) => void)" } } } };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["src/BpmnEditor.tsx#BpmnEditor"] = { docgenInfo: BpmnEditor.__docgenInfo, name: "BpmnEditor", path: "src/BpmnEditor.tsx#BpmnEditor" };
}
catch (__react_docgen_typescript_loader_error) { }

/***/ }),

/***/ "./src/store/StoreContext.ts":
/*!***********************************!*\
  !*** ./src/store/StoreContext.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BpmnEditorStoreApiContext: () => (/* binding */ BpmnEditorStoreApiContext),
/* harmony export */   useBpmnEditorStore: () => (/* binding */ useBpmnEditorStore),
/* harmony export */   useBpmnEditorStoreApi: () => (/* binding */ useBpmnEditorStoreApi)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "../../node_modules/.pnpm/react@17.0.2/node_modules/react/index.js");
/* harmony import */ var zustand_traditional__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand/traditional */ "../../node_modules/.pnpm/zustand@4.4.2_patch_hash=7tws22nsyaxzkdpquvgytzpdve_@types+react@17.0.21_immer@10.0.3_patch_h_vz3zp2qtqlfadsspbucjfdwwom/node_modules/zustand/esm/traditional.mjs");


const BpmnEditorStoreApiContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});
function useBpmnEditorStore(selector, equalityFn) {
  const store = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(BpmnEditorStoreApiContext);
  if (store === null) {
    throw new Error("Can't use BPMN Editor Store outside of the BpmnEditor component.");
  }
  return (0,zustand_traditional__WEBPACK_IMPORTED_MODULE_1__.useStoreWithEqualityFn)(store, selector, equalityFn);
}
function useBpmnEditorStoreApi() {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(BpmnEditorStoreApiContext);
}

/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,